"use client";

import { useState } from "react";
import NextImage from "next/image";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { generateImageFromTextPrompt } from "@/ai/flows/generate-image-from-text-prompt";

import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Skeleton } from "@/components/ui/skeleton";
import { Info, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

const formSchema = z.object({
  prompt: z.string().min(5, "Prompt must be at least 5 characters long."),
});

type FormValues = z.infer<typeof formSchema>;

export function ImageGeneratorForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [imageUrl, setImageUrl] = useState("");
  const { toast } = useToast();

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: "",
    },
  });

  async function onSubmit(values: FormValues) {
    setIsLoading(true);
    setImageUrl("");
    try {
      const result = await generateImageFromTextPrompt(values.prompt);
      setImageUrl(result.imageUrl);
    } catch (error) {
      console.error("Error generating image:", error);
      toast({
        title: "Error",
        description: "Failed to generate the image. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <div>
      <Alert className="mb-6">
        <Info className="h-4 w-4" />
        <AlertTitle>SynthID Watermark</AlertTitle>
        <AlertDescription>
          Images generated by this tool may contain a digital watermark (SynthID) to identify them as AI-generated.
        </AlertDescription>
      </Alert>
      <Card>
        <CardHeader>
          <CardTitle>Image Prompt</CardTitle>
          <CardDescription>Describe the image you want to create in detail.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="prompt"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Prompt</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., A futuristic city skyline at sunset, cyberpunk style" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" disabled={isLoading}>
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                Generate Image
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      {(isLoading || imageUrl) && (
        <Card className="mt-8">
          <CardHeader>
            <CardTitle>Generated Image</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="aspect-square relative w-full">
            {isLoading ? (
                <Skeleton className="h-full w-full rounded-md" />
            ) : (
                imageUrl && (
                    <NextImage 
                        src={imageUrl} 
                        alt={form.getValues("prompt")} 
                        fill 
                        className="object-contain rounded-md"
                    />
                )
            )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
